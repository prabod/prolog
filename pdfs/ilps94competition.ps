%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
80.35 18.95 530.35 28.95 R
7 X
0 K
V
0 10 Q
0 X
(ILPS\32594  Prolog Programming Contest - Novermber 14, 1994 Ithaca) 80.35 22.28 T
( 1 of 5) 462.06 22.28 T
80.35 61.45 531.65 730.55 R
7 X
V
0 12 Q
0 X
0.14 (If the description of the problem relies on given facts, these should not be part of the program) 80.35 722.55 P
0.33 (you submit as a solution. Our test suite will \050only\051 call the predicates which are mentioned in) 80.35 708.55 P
(the title of the sections and with free arguments unless otherwise stated.) 80.35 694.55 T
-0.07 (The state of the Prolog \050 and recorded\051 database before and after a program  run, should be the) 80.35 680.55 P
0.45 (same, i.e. if your method of solution involves asserting some clauses, they should be cleaned) 80.35 666.55 P
-0.41 (up by your program  and without us having to invoke a special predicate. The cleanup time will) 80.35 652.55 P
-0.54 (be counted in the solution time. For some problems, efficiency is important for the ranking: this) 80.35 638.55 P
0.7 (is mentioned. For all problems, there is a timeout on the testing, which can make a \325correct\325) 80.35 624.55 P
(solution unacceptable for the organisation.) 80.35 610.55 T
(Do not use predicates with a name starting with ilps94 or test.) 80.35 596.55 T
1 F
-0.26 (Some  problems were adapted or copied from the Internet Programming Contest: we are) 80.35 568.55 P
0.07 (grateful to Vivek Khera and his team for making the problem statements of the Internet) 80.35 554.55 P
1.06 (Programming Contest publicly available. Other problems come from folklore/real life/) 80.35 540.55 P
(published papers/student assignments ...) 80.35 526.55 T
(1. triplets/0) 80.35 498.55 T
0 F
2.05 (Generate all triples \050X,Y,Z\051 that satisfy the conditions that all three are different integers) 80.35 472.55 P
(between 0 and 9 \050both included\051, and that) 80.35 458.55 T
(\05010*X + Y\051 / \05010*Y+Z\051 equals X / Z \050with infinite precision\051) 152.35 444.55 T
(Output of your program should be on the screen and in the form:) 80.35 430.55 T
(3 5 9) 152.35 402.55 T
(3 1 6) 152.35 388.55 T
( if \0503,5,9\051 and \0503,1,6\051 happen to be the solutions.) 80.35 360.55 T
2 F
(Predicate you must supply: triplets/0.) 123.55 332.55 T
(No input; no given facts; writes on screen.) 123.55 318.55 T
1 F
(2. spiral/2) 80.35 290.55 T
0 F
0.25 (Given two positive integers) 80.35 264.55 P
1 F
0.25 (a) 216.6 264.55 P
0 F
0.25 ( and) 222.6 264.55 P
1 F
0.25 (b) 246.41 264.55 P
0 F
0.25 (, output on the screen a rectangle with width) 253.08 264.55 P
1 F
0.25 (b) 471.18 264.55 P
0 F
0.25 ( and heigth) 477.85 264.55 P
1 F
(a) 80.35 250.55 T
0 F
( containing the numbers from 1 to) 86.35 250.55 T
1 F
(a) 252.58 250.55 T
0 F
(*) 258.57 250.55 T
1 F
(b) 264.57 250.55 T
0 F
( in a spiraling fashion. For) 271.24 250.55 T
1 F
(a) 400.83 250.55 T
0 F
(=4 and) 406.83 250.55 T
1 F
(b) 442.9 250.55 T
0 F
(=3, the output is:) 449.57 250.55 T
(1) 146.35 222.55 T
(2) 200.35 222.55 T
(3) 254.35 222.55 T
(10) 140.36 208.55 T
(11) 194.36 208.55 T
( 4) 251.36 208.55 T
(9) 146.35 194.55 T
(12) 194.36 194.55 T
(5) 254.35 194.55 T
(8) 146.35 180.55 T
(7) 200.35 180.55 T
(6) 254.35 180.55 T
0.41 (The columns must be properly aligned to the right and occupy N+1 positions, where N is the) 80.35 152.55 P
(number of digits in the decimal representation of) 80.35 138.55 T
1 F
(a) 317.52 138.55 T
0 F
(*) 323.52 138.55 T
1 F
(b) 329.52 138.55 T
0 F
(.) 336.18 138.55 T
2 F
(Predicate you must supply: spiral/2.) 123.55 110.55 T
(Two strictly positive integers as input; no given facts; writes on screen.) 123.55 96.55 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
80.35 18.95 530.35 28.95 R
7 X
0 K
V
0 10 Q
0 X
(ILPS\32594  Prolog Programming Contest - Novermber 14, 1994 Ithaca) 80.35 22.28 T
( 2 of 5) 462.06 22.28 T
80.35 61.45 531.65 730.55 R
7 X
V
1 12 Q
0 X
(3. domino/1) 80.35 722.55 T
0 F
-0.27 (You are given a set of domino stones; these stones have 2 numbers on the same side, one at the) 80.35 696.55 P
(left, one at the rigth, more or less like in the example:) 80.35 682.55 T
-0.08 (In the usual game, each participant is given a number of stones, some stone is put on the table,) 80.35 626.95 P
0.19 (and each player in turn must either add to the stones already on the table, or pass. You win, if) 80.35 612.95 P
0.15 (you got rid of your stones first. You add legally to the stones already on the table, if there is a) 80.35 598.95 P
0.18 (stone on the table with a free end containing number x, and you put your stone with its x-side) 80.35 584.95 P
-0.45 (next to the free x-side on the table. Stones with two different numbers have 2 free sides initially) 80.35 570.95 P
0.07 (- one for each number. Stones with 2 equal numbers on them, have 3 free sides. When a stone) 80.35 556.95 P
(is put with a free side next to a free side of another stone, both free sides become occupied.) 80.35 542.95 T
0.53 (You will play a variant called) 80.35 528.95 P
1 F
0.53 (domino) 228.78 528.95 P
0.53 (solitaire) 270.97 528.95 P
0 F
0.53 (: you are given a set of stones and you are to) 312.27 528.95 P
-0.41 (finish the game all by yourself, i.e. start with one of your stones on the table \050you choose which) 80.35 514.95 P
0.58 (one\051, and continue adding stones, until you have no more stones. This can fail of course: the) 80.35 500.95 P
(time to fail \050or first success\051 is important for the score on this problem.) 80.35 486.95 T
(An example: you have the facts:) 80.35 458.95 T
(stone\0502,2\051. stone\0504,6\051. stone\0501,2\051. stone\0502,4\051.  stone\0506,2\051.) 116.35 430.95 T
(You write a predicate domino/1 which returns e.g. the list:) 80.35 402.95 T
([stone\0501,2\051,stone\0502,2\051,stone\0502,4\051,stone\0504,6\051,stone\0506,2\051]) 116.35 374.95 T
(Only the first solution should be returned.) 80.35 346.95 T
0.5 (This list can represent more than one end configuration on the table \050see the picture\051, but the) 80.35 332.95 P
2.39 (order in the list gives you a correct order for the stones to be added incrementally to a) 80.35 318.95 P
(configuration that is always correct according to the rules of the game.) 80.35 304.95 T
2 F
(Predicate you must supply: domino/1.) 123.55 151.95 T
(No input;  given facts stone/2; unifies answer with argument.) 123.55 137.95 T
80.35 61.45 531.65 730.55 C
150.75 636.95 461.25 678.55 C
218.74 651.77 253.84 669.32 R
1 H
2 Z
0 X
0 K
N
236.29 669.32 236.29 651.77 2 L
N
0 12 Q
(2) 224.59 657.76 T
(6) 242.14 657.76 T
338.66 651.77 373.76 669.32 R
N
356.21 669.32 356.21 651.77 2 L
N
(3) 344.51 657.76 T
(3) 362.06 657.76 T
80.35 61.45 531.65 730.55 C
8.35 -24.95 603.65 816.95 C
80.35 61.45 531.65 730.55 C
105.19 175.95 506.81 300.95 C
305.41 237.82 340.51 255.37 R
1 H
2 Z
0 X
0 K
N
322.96 255.37 322.96 237.82 2 L
N
0 12 Q
(1) 311.26 243.81 T
(2) 328.81 243.81 T
341.49 237.82 376.59 255.37 R
N
359.04 255.37 359.04 237.82 2 L
N
(2) 347.34 243.81 T
(2) 364.89 243.81 T
449.71 237.82 484.81 255.37 R
N
467.26 255.37 467.26 237.82 2 L
N
(6) 455.56 243.81 T
(2) 473.11 243.81 T
141.61 228.4 176.71 245.95 R
N
159.16 245.95 159.16 228.4 2 L
N
(1) 147.47 234.39 T
(2) 165.02 234.39 T
413.64 237.82 448.74 255.37 R
N
431.19 255.37 431.19 237.82 2 L
N
(4) 419.49 243.81 T
(6) 437.04 243.81 T
177.69 228.4 195.24 263.5 R
N
177.69 245.95 195.24 245.95 2 L
N
(2) 183.33 234.18 T
(2) 183.33 251.73 T
377.56 237.82 412.66 255.37 R
N
395.11 255.37 395.11 237.82 2 L
N
(2) 383.41 243.81 T
(4) 400.96 243.81 T
177.69 209.87 212.79 227.42 R
N
195.24 227.42 195.24 209.87 2 L
N
(2) 183.54 215.86 T
(4) 201.09 215.86 T
177.69 264.47 212.79 282.02 R
N
195.24 282.02 195.24 264.47 2 L
N
(2) 183.54 270.46 T
(6) 201.09 270.46 T
213.76 209.87 248.86 227.42 R
N
231.31 227.42 231.31 209.87 2 L
N
(4) 219.62 215.86 T
(6) 237.16 215.86 T
80.35 61.45 531.65 730.55 C
8.35 -24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
80.35 18.95 530.35 28.95 R
7 X
0 K
V
0 10 Q
0 X
(ILPS\32594  Prolog Programming Contest - Novermber 14, 1994 Ithaca) 80.35 22.28 T
( 3 of 5) 462.06 22.28 T
80.35 61.45 531.65 730.55 R
7 X
V
1 12 Q
0 X
(4. cr) 80.35 722.55 T
(ossword/1) 102.78 722.55 T
0 F
(You are given an empty crossword puzzle exemplified by the facts) 80.35 696.55 T
(dimension\0505\051 .) 152.35 668.55 T
(% it is always a square crossword puzzle) 224.35 668.55 T
(black\0501,3\051 .) 152.35 654.55 T
(% meaning: square 1,3 is black) 224.35 654.55 T
(black\0502,3\051 . black\0503,2\051 . black\0504,3\051 . black\0505,1\051 . black\0505,5\051 .) 152.35 640.55 T
(These example facts represent the empty puzzle:) 80.35 612.55 T
(You also get a list of words - example) 80.35 493.55 T
(words\050[do,ore,ma,lis,ur,as,po,so,pirus,oker,al,adam,ik]\051 .) 152.35 479.55 T
0.2 (All words have at least  two characters. Fill the puzzle with all the words exactly once. If that) 80.35 451.55 P
(is impossible, fail. Filling the above puzzle with the above words gives:) 80.35 437.55 T
-0.28 (Your program should give the solution as the output parameter of  crossword/1 and in the form) 80.35 275.95 P
(of a list of words in the following order:) 80.35 261.95 T
([as,po,do,ik,ore,ma,ur,lis,adam,so,al,pirus,oker]) 152.35 233.95 T
0.01 (i.e. first all horizontal words, row by row and in a row as they occur from left to rigth, then all) 80.35 205.95 P
(the vertical words, column by column.) 80.35 191.95 T
(If there is more than one solution, your program should produce them all by backtracking.) 80.35 163.95 T
(Every non-black square belongs to a word of 2 or more letters.) 80.35 149.95 T
1 (Your score on this problem depends also on the efficiency of your solution, but correctness) 80.35 121.95 P
(comes first.) 80.35 107.95 T
2 F
(Predicate you must supply: crossword/1.) 123.55 79.95 T
-0.31 (No input;  given facts words/1, black/2, dimension/1; unifies answer with argument) 123.55 65.95 P
80.35 61.45 531.65 730.55 C
121.5 503.55 490.5 608.55 C
268.38 586.42 288.62 606.67 R
1 H
2 Z
0 X
0 K
N
288.62 586.42 308.88 606.67 R
N
308.88 586.42 329.12 606.67 R
V
N
329.12 586.42 349.38 606.67 R
N
349.38 586.42 369.62 606.67 R
N
268.38 566.17 288.62 586.42 R
N
288.62 566.17 308.88 586.42 R
N
308.88 566.17 329.12 586.42 R
V
N
329.12 566.17 349.38 586.42 R
N
349.38 566.17 369.62 586.42 R
N
268.38 545.92 288.62 566.17 R
N
288.62 545.92 308.88 566.17 R
V
N
308.88 545.92 329.12 566.17 R
7 X
V
0 X
N
329.12 545.92 349.38 566.17 R
N
349.38 545.92 369.62 566.17 R
N
268.38 525.67 288.62 545.92 R
N
288.62 525.67 308.88 545.92 R
N
308.88 525.67 329.12 545.92 R
V
N
329.12 525.67 349.38 545.92 R
N
349.38 525.67 369.62 545.92 R
N
268.38 505.42 288.62 525.67 R
V
N
288.62 505.42 308.88 525.67 R
N
308.88 505.42 329.12 525.67 R
7 X
V
0 X
N
329.12 505.42 349.38 525.67 R
N
349.38 505.42 369.62 525.67 R
V
N
80.35 61.45 531.65 730.55 C
8.35 -24.95 603.65 816.95 C
80.35 61.45 531.65 730.55 C
157.5 285.95 454.5 433.55 C
224.19 398.53 250.51 424.86 R
1 H
2 Z
0 X
0 K
N
250.51 398.53 276.84 424.86 R
N
276.84 398.53 303.16 424.86 R
V
N
303.16 398.53 329.49 424.86 R
N
329.49 398.53 355.81 424.86 R
N
224.19 372.21 250.51 398.54 R
N
250.51 372.21 276.84 398.54 R
N
276.84 372.21 303.16 398.54 R
V
N
303.16 372.21 329.49 398.54 R
N
329.49 372.21 355.81 398.54 R
N
224.19 345.88 250.51 372.21 R
N
250.51 345.88 276.84 372.21 R
V
N
276.84 345.88 303.16 372.21 R
7 X
V
0 X
N
303.16 345.88 329.49 372.21 R
N
329.49 345.88 355.81 372.21 R
N
224.19 319.56 250.51 345.89 R
N
250.51 319.56 276.84 345.89 R
N
276.84 319.56 303.16 345.89 R
V
N
303.16 319.56 329.49 345.89 R
N
329.49 319.56 355.81 345.89 R
N
224.19 293.24 250.51 319.56 R
V
N
250.51 293.24 276.84 319.56 R
N
276.84 293.24 303.16 319.56 R
7 X
V
0 X
N
303.16 293.24 329.49 319.56 R
N
329.49 293.24 355.81 319.56 R
V
N
0 18 Q
(A) 231.01 406.23 T
(S) 260.26 406.23 T
(I) 315.84 381.59 T
(K) 336.31 379.64 T
(P) 313.89 406.23 T
(O) 336.31 406.23 T
(O) 257.34 379.64 T
(D) 232 379.64 T
(A) 257.34 326.19 T
(O) 283.66 353.32 T
(R) 309.99 353.32 T
(E) 336.31 353.32 T
(M) 231.01 326.99 T
(A) 231.02 354.29 T
(U) 309.99 327.16 T
(R) 333.39 326.99 T
(L) 261.24 300.67 T
(I) 287.56 299.96 T
(S) 311.94 299.96 T
80.35 61.45 531.65 730.55 C
8.35 -24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
80.35 18.95 530.35 28.95 R
7 X
0 K
V
0 10 Q
0 X
(ILPS\32594  Prolog Programming Contest - Novermber 14, 1994 Ithaca) 80.35 22.28 T
( 4 of 5) 462.06 22.28 T
80.35 61.45 531.65 730.55 R
7 X
V
1 12 Q
0 X
(5. loops/1) 80.35 722.55 T
0 F
( You get a directed graph in the form:) 80.35 696.55 T
(arrow\050a,b\051 .) 152.35 668.55 T
(arrow\050b,c\051 .) 152.35 654.55 T
(arrow\050c,c\051 .) 152.35 640.55 T
(arrow\050a,d\051 .) 152.35 626.55 T
(arrow\050d,a\051 .) 152.35 612.55 T
-0.03 (with obvious meaning. You are to write a predicate loops/1 that returns a list \050possibly empty\051) 80.35 584.55 P
0.18 (of all the \050minimal\051 cycles in the graph. A cycle is represented by a list which contains all the) 80.35 570.55 P
0.24 (nodes in the cycle in the order in which arrows link them and it starts and ends with the same) 80.35 556.55 P
0.46 (node: a minimal cycle does not properly contain any other cycle. Every minimal cycle of the) 80.35 542.55 P
0.4 (graph should be given exactly once. For the example, your program could deliver as solution) 80.35 528.55 P
(only:) 80.35 514.55 T
([[c,c],[a,d,a]] or [[c,c],[d,a,d]] or [[a,d,a],[c,c],] or [[d,a,d],[c,c],]) 152.35 486.55 T
(i.e. the order in the list of cycles is irrelevant and so is the actual start node of a cycle.) 80.35 458.55 T
2 F
(Predicate you must supply: loops/1.) 123.55 430.55 T
(No input;  given facts arrow/2; unifies answer with argument.) 123.55 416.55 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
80.35 18.95 530.35 28.95 R
7 X
0 K
V
0 10 Q
0 X
(ILPS\32594  Prolog Programming Contest - Novermber 14, 1994 Ithaca) 80.35 22.28 T
( 5 of 5) 462.06 22.28 T
80.35 61.45 531.65 730.55 R
7 X
V
1 12 Q
0 X
(6. path/1) 80.35 722.55 T
0 F
-0.51 (On a square board of size N \050say 4 in the example, given by the fact size\0504\051 . \051, there is a starting) 80.35 696.55 P
-0.09 (point \050always square 1,1\051 and an end point \050given by a  fact e.g.goto\0501,4,f\051 .\051 There is a correct) 80.35 682.55 P
0.31 (path between the starting and the end point and it is marked: each square of the path contains) 80.35 668.55 P
(the information how to get to the next square in the path, in the form of a fact:) 80.35 654.55 T
(goto\0501,1,u\051 . % meaning from square 1,1 go up - i.e. to square 1,2) 152.35 626.55 T
(goto\0501,2,u\051 .) 152.35 612.55 T
(goto\0501,3,r\051 . % meaning from square 1,3 go rigth - i.e. to square 2,3) 152.35 598.55 T
(goto\0502,3,r\051 .) 152.35 584.55 T
(goto\0503,3,d\051 . % meaning from square 3,3 go down - i.e. to square 3,2) 152.35 570.55 T
(goto\0503,2,d\051 .) 152.35 556.55 T
(goto\0503,1,r\051 .) 152.35 542.55 T
(An l would have meant \325left\325 of course and f means final destination reached.) 80.35 514.55 T
(So, the above information represents the board:) 80.35 500.55 T
(There is of course no problem in finding the correct path from 1,1 to 1,4 on such a board.) 80.35 387.55 T
1.14 (However, a mean demon has removed some information from the board: it has taken away) 80.35 373.55 P
1.26 (some goto/3 facts, so that the path is no longer completely represented. Still, it wasn\325t that) 80.35 359.55 P
0.21 (mean, since no two neighbouring squares in the path have their information removed, the end) 80.35 345.55 P
-0.55 (point is not removed and at most two neighbours of a removed square belong to the correct path) 80.35 331.55 P
-0.23 (\050diagonally touching squares are not considered neighbours\051: you can still easely find the path.) 80.35 317.55 P
-0.26 (However, a second, much meaner demon has introduced information for every square NOT on) 80.35 303.55 P
0.61 (the path and in such a way, that if you follow this information, you will either run around in) 80.35 289.55 P
(circles or fall off the board \050in particular, you will not meet \325empty\325 squares\051.) 80.35 275.55 T
(Here is an example of such a mutilated board:) 80.35 261.55 T
-0.1 (You are asked to write a predicate path/1 which delivers the correct path, as a list starting with) 80.35 153.55 P
0.22 (\0501,1\051 and ending in the endpoint and ordered along the path. So, in the above example, path/1) 80.35 139.55 P
(delivers) 80.35 125.55 T
(X = [\0501,1\051,\0501,2\051,\0501,3\051,\0502,3\051,\0503,3\051,\0503,2\051,\0503,1\051,\0504,1\051]) 152.35 111.55 T
2 F
(Predicate you must supply: path/1.) 123.55 83.55 T
(No input,  given facts goto/3; unifies answer with argument.) 123.55 69.55 T
80.35 61.45 531.65 730.55 C
153 397.55 459 496.55 C
273.5 466.8 293.75 487.05 R
1 H
2 Z
0 X
0 K
N
293.75 466.8 314 487.05 R
N
314 466.8 334.25 487.05 R
7 X
V
0 X
N
334.25 466.8 354.5 487.05 R
N
273.5 446.55 293.75 466.8 R
N
293.75 446.55 314 466.8 R
N
314 446.55 334.25 466.8 R
7 X
V
0 X
N
334.25 446.55 354.5 466.8 R
N
273.5 426.3 293.75 446.55 R
N
293.75 426.3 314 446.55 R
7 X
V
0 X
N
314 426.3 334.25 446.55 R
7 X
V
0 X
N
334.25 426.3 354.5 446.55 R
N
273.5 406.05 293.75 426.3 R
N
293.75 406.05 314 426.3 R
N
314 406.05 334.25 426.3 R
7 X
V
0 X
N
334.25 406.05 354.5 426.3 R
N
0 14 Q
(u) 281 412.76 T
(u) 281 431.08 T
(r) 281 452.83 T
(r) 301.25 452.08 T
(d) 321.5 451.01 T
(d) 321.5 432.26 T
(r) 323 413.51 T
(f) 341.75 412.76 T
80.35 61.45 531.65 730.55 C
8.35 -24.95 603.65 816.95 C
80.35 61.45 531.65 730.55 C
180 163.55 432 257.55 C
249.5 232.8 269.75 253.05 R
1 H
2 Z
0 X
0 K
N
269.75 232.8 290 253.05 R
N
290 232.8 310.25 253.05 R
7 X
V
0 X
N
310.25 232.8 330.5 253.05 R
N
249.5 212.55 269.75 232.8 R
N
269.75 212.55 290 232.8 R
N
290 212.55 310.25 232.8 R
7 X
V
0 X
N
310.25 212.55 330.5 232.8 R
N
249.5 192.3 269.75 212.55 R
N
269.75 192.3 290 212.55 R
7 X
V
0 X
N
290 192.3 310.25 212.55 R
7 X
V
0 X
N
310.25 192.3 330.5 212.55 R
N
249.5 172.05 269.75 192.3 R
N
269.75 172.05 290 192.3 R
N
290 172.05 310.25 192.3 R
7 X
V
0 X
N
310.25 172.05 330.5 192.3 R
N
0 14 Q
(u) 257 178.76 T
(r) 257 218.83 T
(d) 297.5 217.01 T
(r) 299 179.51 T
(f) 317.75 178.76 T
(l) 258.5 238.01 T
(l) 278.75 238.76 T
(u) 298.25 239.08 T
(r) 317.75 239.08 T
(d) 318.5 218.08 T
(d) 277.25 199.76 T
(u) 318.5 199.33 T
(d) 277.25 180.26 T
80.35 61.45 531.65 730.55 C
8.35 -24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "5" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 5 1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-BoldItalic
