%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "4" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 22.9 522 53.9 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
-0.48 (Second Prolog Programming Contest - December 4, 1995, Portland, Oregon, ILPS\32595) 72 47.23 P
-0.48 ( 4 of 4) 497.61 47.23 P
72 67.9 522 769.9 R
7 X
V
1 12 Q
0 X
(6. numbers) 72 761.9 T
0 F
1.47 (There is an infinite grid which has a finite number of its parts lit up - see picture 1 as an) 72 735.9 P
0.11 (example. These lit up parts are represented by given facts lit/4 which have start and end point) 72 721.9 P
0.5 (coordinates as arguments. Like on a digital display, these lit up parts can be seen as forming) 72 707.9 P
1.27 (numbers from 0 to 9. You are to write a predicate numbers/1 which returns a list \050without) 72 693.9 P
-0.21 (duplicates - but order is not important\051 of all the numbers that are recognisable in the given set) 72 679.9 P
(of facts. For picture 1, this would be \050up to the order in the list\051:) 72 665.9 T
(?- numbers\050L\051 .) 72 637.9 T
(L = [0,1,2,3,4,5,6,7,8,9]) 72 623.9 T
0.06 (The grid 1 indeed contains all numbers from 0 to 9, so that you would know how any number) 72 448.9 P
-0.31 (is formed. The dot indicates the point with coordinates \0500,0\051 in the grid, so the number 3 above) 72 434.9 P
(could be represented by the facts:) 72 420.9 T
(lit\0501,2,2,2\051 . lit\0502,2,2,3\051. lit\0502,4,2,3\051 . lit\0502,3,1,3\051 . lit\0502,4,1,4\051 .) 144 392.9 T
(No scaling should be performed, i.e. you should not recognise the number 8 in picture 2.) 72 364.9 T
-0.3 (On the other hand, numbers can be rotated and/or recognisable as subpart of a configuration of) 72 336.9 P
(lit up parts. E.g. in picture 3, we have:) 72 322.9 T
(?- numbers\050L\051 .) 72 294.9 T
(L = [1,3,4,7]) 72 280.9 T
0.15 (The orientation of all the numbers doesn't need to be the same and one lit up part can be used) 72 252.9 P
0.23 (as part of more than one number \050for instance, a 4 and a 1 is hidden in a 9 - which could also) 72 238.9 P
(be a rotated 6\051.) 72 224.9 T
72 67.9 522 769.9 C
74.29 472.9 519.71 605.9 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.56 596.77 97.56 587.86 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
97.56 587.86 97.56 578.95 2 L
3 H
N
97.56 578.95 97.56 570.04 2 L
N
97.56 570.04 97.56 561.13 2 L
0.5 H
N
97.56 561.13 97.56 552.22 2 L
N
97.56 552.22 97.56 543.31 2 L
N
97.56 543.31 97.56 534.4 2 L
N
97.56 534.4 97.56 525.49 2 L
N
97.56 525.49 97.56 516.58 2 L
N
97.56 516.58 97.56 507.67 2 L
N
97.56 507.67 97.56 498.76 2 L
N
106.47 596.77 106.47 587.86 2 L
N
106.47 587.86 106.47 578.95 2 L
3 H
N
106.47 578.95 106.47 570.04 2 L
N
106.47 570.04 106.47 561.13 2 L
0.5 H
N
106.47 561.13 106.47 552.22 2 L
N
106.47 552.22 106.47 543.31 2 L
N
106.47 543.31 106.47 534.4 2 L
3 H
N
106.47 534.4 106.47 525.49 2 L
0.5 H
N
106.47 525.49 106.47 516.58 2 L
N
106.47 516.58 106.47 507.67 2 L
N
106.47 507.67 106.47 498.76 2 L
N
115.38 596.77 115.38 587.86 2 L
N
115.38 587.86 115.38 578.95 2 L
3 H
N
115.38 578.95 115.38 570.04 2 L
N
115.38 570.04 115.38 561.13 2 L
0.5 H
N
115.38 561.13 115.38 552.22 2 L
N
115.38 552.22 115.38 543.31 2 L
N
115.38 543.31 115.38 534.4 2 L
N
115.38 534.4 115.38 525.49 2 L
3 H
N
115.38 525.49 115.38 516.58 2 L
0.5 H
N
115.38 516.58 115.38 507.67 2 L
N
115.38 507.67 115.38 498.76 2 L
N
124.29 596.77 124.29 587.86 2 L
N
124.29 587.86 124.29 578.95 2 L
N
124.29 578.95 124.29 570.04 2 L
3 H
N
124.29 570.04 124.29 561.13 2 L
0.5 H
N
124.29 561.13 124.29 552.22 2 L
N
124.29 552.22 124.29 543.31 2 L
N
124.29 543.31 124.29 534.4 2 L
3 H
N
124.29 534.4 124.29 525.49 2 L
N
124.29 525.49 124.29 516.58 2 L
0.5 H
N
124.29 516.58 124.29 507.67 2 L
N
124.29 507.67 124.29 498.76 2 L
N
133.2 596.77 133.2 587.86 2 L
N
133.2 587.86 133.2 578.95 2 L
3 H
N
133.2 578.95 133.2 570.04 2 L
0.5 H
N
133.2 570.04 133.2 561.13 2 L
N
133.2 561.13 133.2 552.22 2 L
N
133.2 552.22 133.2 543.31 2 L
N
133.2 543.31 133.2 534.4 2 L
N
133.2 534.4 133.2 525.49 2 L
3 H
N
133.2 525.49 133.2 516.58 2 L
0.5 H
N
133.2 516.58 133.2 507.67 2 L
N
133.2 507.67 133.2 498.76 2 L
N
142.11 596.77 142.11 587.86 2 L
N
142.11 587.86 142.11 578.95 2 L
N
142.11 578.95 142.11 570.04 2 L
N
142.11 570.04 142.11 561.13 2 L
N
142.11 561.13 142.11 552.22 2 L
N
142.11 552.22 142.11 543.31 2 L
N
142.11 543.31 142.11 534.4 2 L
N
142.11 534.4 142.11 525.49 2 L
N
142.11 525.49 142.11 516.58 2 L
N
142.11 516.58 142.11 507.67 2 L
3 H
N
142.11 507.67 142.11 498.76 2 L
0.5 H
N
151.02 596.77 151.02 587.86 2 L
N
151.02 587.86 151.02 578.95 2 L
3 H
N
151.02 578.95 151.02 570.04 2 L
N
151.02 570.04 151.02 561.13 2 L
0.5 H
N
151.02 561.13 151.02 552.22 2 L
N
151.02 552.22 151.02 543.31 2 L
N
151.02 543.31 151.02 534.4 2 L
N
151.02 534.4 151.02 525.49 2 L
N
151.02 525.49 151.02 516.58 2 L
N
151.02 516.58 151.02 507.67 2 L
3 H
N
151.02 507.67 151.02 498.76 2 L
N
159.93 596.77 159.93 587.86 2 L
0.5 H
N
159.93 587.86 159.93 578.95 2 L
N
159.93 578.95 159.93 570.04 2 L
N
159.93 570.04 159.93 561.13 2 L
N
159.93 561.13 159.93 552.22 2 L
N
159.93 552.22 159.93 543.31 2 L
N
159.93 543.31 159.93 534.4 2 L
3 H
N
159.93 534.4 159.93 525.49 2 L
N
159.93 525.49 159.93 516.58 2 L
0.5 H
N
159.93 516.58 159.93 507.67 2 L
N
159.93 507.67 159.93 498.76 2 L
N
168.84 596.77 168.84 587.86 2 L
N
168.84 587.86 168.84 578.95 2 L
3 H
N
168.84 578.95 168.84 570.04 2 L
0.5 H
N
168.84 570.04 168.84 561.13 2 L
N
168.84 561.13 168.84 552.22 2 L
N
168.84 552.22 168.84 543.31 2 L
N
168.84 543.31 168.84 534.4 2 L
N
168.84 534.4 168.84 525.49 2 L
N
168.84 525.49 168.84 516.58 2 L
3 H
N
168.84 516.58 168.84 507.67 2 L
N
168.84 507.67 168.84 498.76 2 L
0.5 H
N
177.75 596.77 177.75 587.86 2 L
N
177.75 587.86 177.75 578.95 2 L
3 H
N
177.75 578.95 177.75 570.04 2 L
N
177.75 570.04 177.75 561.13 2 L
0.5 H
N
177.75 561.13 177.75 552.22 2 L
N
177.75 552.22 177.75 543.31 2 L
N
177.75 543.31 177.75 534.4 2 L
N
177.75 534.4 177.75 525.49 2 L
N
177.75 525.49 177.75 516.58 2 L
3 H
N
177.75 516.58 177.75 507.67 2 L
N
177.75 507.67 177.75 498.76 2 L
0.5 H
N
88.65 507.67 97.56 507.67 2 L
N
97.56 507.67 106.47 507.67 2 L
N
106.47 507.67 115.38 507.67 2 L
N
115.38 507.67 124.29 507.67 2 L
N
124.29 507.67 133.2 507.67 2 L
N
133.2 507.67 142.11 507.67 2 L
N
142.11 507.67 151.02 507.67 2 L
3 H
N
151.02 507.67 159.93 507.67 2 L
0.5 H
N
159.93 507.67 168.84 507.67 2 L
N
168.84 507.67 177.75 507.67 2 L
3 H
N
177.75 507.67 186.66 507.67 2 L
0.5 H
N
88.65 516.58 97.56 516.58 2 L
N
97.56 516.58 106.47 516.58 2 L
N
106.47 516.58 115.38 516.58 2 L
N
115.38 516.58 124.29 516.58 2 L
N
124.29 516.58 133.2 516.58 2 L
N
133.2 516.58 142.11 516.58 2 L
N
142.11 516.58 151.02 516.58 2 L
3 H
N
151.02 516.58 159.93 516.58 2 L
0.5 H
N
159.93 516.58 168.84 516.58 2 L
N
168.84 516.58 177.75 516.58 2 L
3 H
N
177.75 516.58 186.66 516.58 2 L
0.5 H
N
88.65 525.49 97.56 525.49 2 L
N
97.56 525.49 106.47 525.49 2 L
N
106.47 525.49 115.38 525.49 2 L
3 H
N
115.38 525.49 124.29 525.49 2 L
0.5 H
N
124.29 525.49 133.2 525.49 2 L
3 H
N
133.2 525.49 142.11 525.49 2 L
0.5 H
N
142.11 525.49 151.02 525.49 2 L
N
151.02 525.49 159.93 525.49 2 L
N
159.93 525.49 168.84 525.49 2 L
N
168.84 525.49 177.75 525.49 2 L
3 H
N
177.75 525.49 186.66 525.49 2 L
0.5 H
N
88.65 534.4 97.56 534.4 2 L
N
97.56 534.4 106.47 534.4 2 L
N
106.47 534.4 115.38 534.4 2 L
3 H
N
115.38 534.4 124.29 534.4 2 L
0.5 H
N
124.29 534.4 133.2 534.4 2 L
3 H
N
133.2 534.4 142.11 534.4 2 L
0.5 H
N
142.11 534.4 151.02 534.4 2 L
N
151.02 534.4 159.93 534.4 2 L
N
159.93 534.4 168.84 534.4 2 L
N
168.84 534.4 177.75 534.4 2 L
N
177.75 534.4 186.66 534.4 2 L
N
88.65 543.31 97.56 543.31 2 L
N
97.56 543.31 106.47 543.31 2 L
N
106.47 543.31 115.38 543.31 2 L
3 H
N
115.38 543.31 124.29 543.31 2 L
0.5 H
N
124.29 543.31 133.2 543.31 2 L
N
133.2 543.31 142.11 543.31 2 L
N
142.11 543.31 151.02 543.31 2 L
N
151.02 543.31 159.93 543.31 2 L
3 H
N
159.93 543.31 168.84 543.31 2 L
0.5 H
N
168.84 543.31 177.75 543.31 2 L
N
177.75 543.31 186.66 543.31 2 L
N
88.65 552.22 97.56 552.22 2 L
N
97.56 552.22 106.47 552.22 2 L
N
106.47 552.22 115.38 552.22 2 L
N
115.38 552.22 124.29 552.22 2 L
N
124.29 552.22 133.2 552.22 2 L
N
133.2 552.22 142.11 552.22 2 L
N
142.11 552.22 151.02 552.22 2 L
N
151.02 552.22 159.93 552.22 2 L
N
159.93 552.22 168.84 552.22 2 L
N
168.84 552.22 177.75 552.22 2 L
N
177.75 552.22 186.66 552.22 2 L
N
88.65 561.13 97.56 561.13 2 L
N
97.56 561.13 106.47 561.13 2 L
N
106.47 561.13 115.38 561.13 2 L
N
115.38 561.13 124.29 561.13 2 L
N
124.29 561.13 133.2 561.13 2 L
N
133.2 561.13 142.11 561.13 2 L
N
142.11 561.13 151.02 561.13 2 L
N
151.02 561.13 159.93 561.13 2 L
N
159.93 561.13 168.84 561.13 2 L
N
168.84 561.13 177.75 561.13 2 L
N
177.75 561.13 186.66 561.13 2 L
N
88.65 570.04 97.56 570.04 2 L
N
97.56 570.04 106.47 570.04 2 L
3 H
N
106.47 570.04 115.38 570.04 2 L
0.5 H
N
115.38 570.04 124.29 570.04 2 L
N
124.29 570.04 133.2 570.04 2 L
3 H
N
133.2 570.04 142.11 570.04 2 L
0.5 H
N
142.11 570.04 151.02 570.04 2 L
3 H
N
151.02 570.04 159.93 570.04 2 L
0.5 H
N
159.93 570.04 168.84 570.04 2 L
N
168.84 570.04 177.75 570.04 2 L
N
177.75 570.04 186.66 570.04 2 L
N
88.65 578.95 97.56 578.95 2 L
N
97.56 578.95 106.47 578.95 2 L
N
106.47 578.95 115.38 578.95 2 L
N
115.38 578.95 124.29 578.95 2 L
N
124.29 578.95 133.2 578.95 2 L
3 H
N
133.2 578.95 142.11 578.95 2 L
0.5 H
N
142.11 578.95 151.02 578.95 2 L
3 H
N
151.02 578.95 159.93 578.95 2 L
0.5 H
N
159.93 578.95 168.84 578.95 2 L
N
168.84 578.95 177.75 578.95 2 L
3 H
N
177.75 578.95 186.66 578.95 2 L
0.5 H
N
88.65 587.86 97.56 587.86 2 L
N
97.56 587.86 106.47 587.86 2 L
3 H
N
106.47 587.86 115.38 587.86 2 L
0.5 H
N
115.38 587.86 124.29 587.86 2 L
N
124.29 587.86 133.2 587.86 2 L
3 H
N
133.2 587.86 142.11 587.86 2 L
0.5 H
N
142.11 587.86 151.02 587.86 2 L
3 H
N
151.02 587.86 159.93 587.86 2 L
0.5 H
N
159.93 587.86 168.84 587.86 2 L
N
168.84 587.86 177.75 587.86 2 L
N
177.75 587.86 186.66 587.86 2 L
N
131.22 550.24 135.67 554.7 2.23 RR
V
N
0 12 Q
(Picture 1) 118.62 488.44 T
81.49 477.06 192.86 599.24 R
N
258.18 572.15 258.18 563.24 2 L
N
258.18 563.24 258.18 554.33 2 L
N
258.18 554.33 258.18 545.42 2 L
N
258.18 545.42 258.18 536.51 2 L
N
258.18 536.51 258.18 527.6 2 L
N
258.18 527.6 258.18 518.69 2 L
N
267.09 572.15 267.09 563.24 2 L
N
267.09 563.24 267.09 554.33 2 L
N
267.09 554.33 267.09 545.42 2 L
N
267.09 545.42 267.09 536.51 2 L
N
267.09 536.51 267.09 527.6 2 L
N
267.09 527.6 267.09 518.69 2 L
N
276 572.15 276 563.24 2 L
N
276 563.24 276 554.33 2 L
N
276 554.33 276 545.42 2 L
N
276 545.42 276 536.51 2 L
N
276 536.51 276 527.6 2 L
N
276 527.6 276 518.69 2 L
N
284.9 572.15 284.9 563.24 2 L
N
284.9 563.24 284.9 554.33 2 L
N
284.9 554.33 284.9 545.42 2 L
N
284.9 545.42 284.9 536.51 2 L
N
284.9 536.51 284.9 527.6 2 L
N
284.9 527.6 284.9 518.69 2 L
N
293.82 572.15 293.82 563.24 2 L
N
293.82 563.24 293.82 554.33 2 L
3 H
N
293.82 554.33 293.82 545.42 2 L
N
293.82 545.42 293.82 536.51 2 L
N
293.82 536.51 293.82 527.6 2 L
N
293.82 527.6 293.82 518.69 2 L
0.5 H
N
302.73 572.15 302.73 563.24 2 L
N
302.73 563.24 302.73 554.33 2 L
N
302.73 554.33 302.73 545.42 2 L
N
302.73 545.42 302.73 536.51 2 L
N
302.73 536.51 302.73 527.6 2 L
N
302.73 527.6 302.73 518.69 2 L
N
311.63 572.15 311.63 563.24 2 L
N
311.63 563.24 311.63 554.33 2 L
3 H
N
311.63 554.33 311.63 545.42 2 L
N
311.63 545.42 311.63 536.51 2 L
N
311.63 536.51 311.63 527.6 2 L
N
311.63 527.6 311.63 518.69 2 L
0.5 H
N
320.54 572.15 320.54 563.24 2 L
N
320.54 563.24 320.54 554.33 2 L
N
320.54 554.33 320.54 545.42 2 L
N
320.54 545.42 320.54 536.51 2 L
N
320.54 536.51 320.54 527.6 2 L
N
320.54 527.6 320.54 518.69 2 L
N
329.45 572.15 329.45 563.24 2 L
N
329.45 563.24 329.45 554.33 2 L
N
329.45 554.33 329.45 545.42 2 L
N
329.45 545.42 329.45 536.51 2 L
N
329.45 536.51 329.45 527.6 2 L
N
329.45 527.6 329.45 518.69 2 L
N
338.36 572.15 338.36 563.24 2 L
N
338.36 563.24 338.36 554.33 2 L
N
338.36 554.33 338.36 545.42 2 L
N
338.36 545.42 338.36 536.51 2 L
N
338.36 536.51 338.36 527.6 2 L
N
338.36 527.6 338.36 518.69 2 L
N
249.27 527.6 258.18 527.6 2 L
N
258.18 527.6 267.09 527.6 2 L
N
267.09 527.6 276 527.6 2 L
N
276 527.6 284.9 527.6 2 L
N
284.9 527.6 293.82 527.6 2 L
N
293.82 527.6 302.73 527.6 2 L
3 H
N
302.73 527.6 311.63 527.6 2 L
N
311.63 527.6 320.54 527.6 2 L
0.5 H
N
320.54 527.6 329.45 527.6 2 L
N
329.45 527.6 338.36 527.6 2 L
N
338.36 527.6 347.27 527.6 2 L
N
249.27 536.51 258.18 536.51 2 L
N
258.18 536.51 267.09 536.51 2 L
N
267.09 536.51 276 536.51 2 L
N
276 536.51 284.9 536.51 2 L
N
284.9 536.51 293.82 536.51 2 L
N
293.82 536.51 302.73 536.51 2 L
N
302.73 536.51 311.63 536.51 2 L
N
311.63 536.51 320.54 536.51 2 L
N
320.54 536.51 329.45 536.51 2 L
N
329.45 536.51 338.36 536.51 2 L
N
338.36 536.51 347.27 536.51 2 L
N
249.27 545.42 258.18 545.42 2 L
N
258.18 545.42 267.09 545.42 2 L
N
267.09 545.42 276 545.42 2 L
N
276 545.42 284.9 545.42 2 L
N
284.9 545.42 293.82 545.42 2 L
N
293.82 545.42 302.73 545.42 2 L
3 H
N
302.73 545.42 311.63 545.42 2 L
N
311.63 545.42 320.54 545.42 2 L
0.5 H
N
320.54 545.42 329.45 545.42 2 L
N
329.45 545.42 338.36 545.42 2 L
N
338.36 545.42 347.27 545.42 2 L
N
249.27 554.33 258.18 554.33 2 L
N
258.18 554.33 267.09 554.33 2 L
N
267.09 554.33 276 554.33 2 L
N
276 554.33 284.9 554.33 2 L
N
284.9 554.33 293.82 554.33 2 L
N
293.82 554.33 302.73 554.33 2 L
N
302.73 554.33 311.63 554.33 2 L
N
311.63 554.33 320.54 554.33 2 L
N
320.54 554.33 329.45 554.33 2 L
N
329.45 554.33 338.36 554.33 2 L
N
338.36 554.33 347.27 554.33 2 L
N
249.27 563.24 258.18 563.24 2 L
N
258.18 563.24 267.09 563.24 2 L
N
267.09 563.24 276 563.24 2 L
N
276 563.24 284.9 563.24 2 L
N
284.9 563.24 293.82 563.24 2 L
N
293.82 563.24 302.73 563.24 2 L
3 H
N
302.73 563.24 311.63 563.24 2 L
N
311.63 563.24 320.54 563.24 2 L
0.5 H
N
320.54 563.24 329.45 563.24 2 L
N
329.45 563.24 338.36 563.24 2 L
N
338.36 563.24 347.27 563.24 2 L
N
246.87 499.69 349.33 576.61 R
N
(Picture 2) 282.01 506.83 T
414.75 576.4 414.75 567.4 2 L
N
414.75 567.4 414.75 558.4 2 L
N
414.75 558.4 414.75 549.4 2 L
N
414.75 549.4 414.75 540.4 2 L
N
414.75 540.4 414.75 531.4 2 L
N
414.75 531.4 414.75 522.4 2 L
N
414.75 522.4 414.75 513.4 2 L
N
423.75 576.4 423.75 567.4 2 L
N
423.75 567.4 423.75 558.4 2 L
N
423.75 558.4 423.75 549.4 2 L
N
423.75 549.4 423.75 540.4 2 L
N
423.75 540.4 423.75 531.4 2 L
N
423.75 531.4 423.75 522.4 2 L
N
423.75 522.4 423.75 513.4 2 L
N
432.75 576.4 432.75 567.4 2 L
N
432.75 567.4 432.75 558.4 2 L
N
432.75 558.4 432.75 549.4 2 L
N
432.75 549.4 432.75 540.4 2 L
N
432.75 540.4 432.75 531.4 2 L
3 H
N
432.75 531.4 432.75 522.4 2 L
0.5 H
N
432.75 522.4 432.75 513.4 2 L
N
441.75 576.4 441.75 567.4 2 L
N
441.75 567.4 441.75 558.4 2 L
N
441.75 558.4 441.75 549.4 2 L
N
441.75 549.4 441.75 540.4 2 L
N
441.75 540.4 441.75 531.4 2 L
3 H
N
441.75 531.4 441.75 522.4 2 L
0.5 H
N
441.75 522.4 441.75 513.4 2 L
N
450.75 576.4 450.75 567.4 2 L
N
450.75 567.4 450.75 558.4 2 L
N
450.75 558.4 450.75 549.4 2 L
N
450.75 549.4 450.75 540.4 2 L
N
450.75 540.4 450.75 531.4 2 L
3 H
N
450.75 531.4 450.75 522.4 2 L
0.5 H
N
450.75 522.4 450.75 513.4 2 L
N
459.75 576.4 459.75 567.4 2 L
N
459.75 567.4 459.75 558.4 2 L
N
459.75 558.4 459.75 549.4 2 L
3 H
N
459.75 549.4 459.75 540.4 2 L
0.5 H
N
459.75 540.4 459.75 531.4 2 L
N
459.75 531.4 459.75 522.4 2 L
N
459.75 522.4 459.75 513.4 2 L
N
468.75 576.4 468.75 567.4 2 L
N
468.75 567.4 468.75 558.4 2 L
N
468.75 558.4 468.75 549.4 2 L
N
468.75 549.4 468.75 540.4 2 L
N
468.75 540.4 468.75 531.4 2 L
N
468.75 531.4 468.75 522.4 2 L
N
468.75 522.4 468.75 513.4 2 L
N
477.75 576.4 477.75 567.4 2 L
N
477.75 567.4 477.75 558.4 2 L
N
477.75 558.4 477.75 549.4 2 L
3 H
N
477.75 549.4 477.75 540.4 2 L
0.5 H
N
477.75 540.4 477.75 531.4 2 L
N
477.75 531.4 477.75 522.4 2 L
N
477.75 522.4 477.75 513.4 2 L
N
486.75 576.4 486.75 567.4 2 L
N
486.75 567.4 486.75 558.4 2 L
N
486.75 558.4 486.75 549.4 2 L
N
486.75 549.4 486.75 540.4 2 L
N
486.75 540.4 486.75 531.4 2 L
N
486.75 531.4 486.75 522.4 2 L
N
486.75 522.4 486.75 513.4 2 L
N
495.75 576.4 495.75 567.4 2 L
N
495.75 567.4 495.75 558.4 2 L
N
495.75 558.4 495.75 549.4 2 L
N
495.75 549.4 495.75 540.4 2 L
N
495.75 540.4 495.75 531.4 2 L
N
495.75 531.4 495.75 522.4 2 L
N
495.75 522.4 495.75 513.4 2 L
N
405.75 522.4 414.75 522.4 2 L
N
414.75 522.4 423.75 522.4 2 L
N
423.75 522.4 432.75 522.4 2 L
N
432.75 522.4 441.75 522.4 2 L
N
441.75 522.4 450.75 522.4 2 L
N
450.75 522.4 459.75 522.4 2 L
N
459.75 522.4 468.75 522.4 2 L
N
468.75 522.4 477.75 522.4 2 L
N
477.75 522.4 486.75 522.4 2 L
N
486.75 522.4 495.75 522.4 2 L
N
495.75 522.4 504.75 522.4 2 L
N
405.75 531.4 414.75 531.4 2 L
N
414.75 531.4 423.75 531.4 2 L
N
423.75 531.4 432.75 531.4 2 L
N
432.75 531.4 441.75 531.4 2 L
N
441.75 531.4 450.75 531.4 2 L
N
450.75 531.4 459.75 531.4 2 L
N
459.75 531.4 468.75 531.4 2 L
N
468.75 531.4 477.75 531.4 2 L
N
477.75 531.4 486.75 531.4 2 L
N
486.75 531.4 495.75 531.4 2 L
N
495.75 531.4 504.75 531.4 2 L
N
405.75 540.4 414.75 540.4 2 L
N
414.75 540.4 423.75 540.4 2 L
N
423.75 540.4 432.75 540.4 2 L
N
432.75 540.4 441.75 540.4 2 L
3 H
N
441.75 540.4 450.75 540.4 2 L
N
450.75 540.4 459.75 540.4 2 L
0.5 H
N
459.75 540.4 468.75 540.4 2 L
N
468.75 540.4 477.75 540.4 2 L
N
477.75 540.4 486.75 540.4 2 L
N
486.75 540.4 495.75 540.4 2 L
N
495.75 540.4 504.75 540.4 2 L
N
405.75 549.4 414.75 549.4 2 L
N
414.75 549.4 423.75 549.4 2 L
N
423.75 549.4 432.75 549.4 2 L
N
432.75 549.4 441.75 549.4 2 L
N
441.75 549.4 450.75 549.4 2 L
N
450.75 549.4 459.75 549.4 2 L
3 H
N
459.75 549.4 468.75 549.4 2 L
N
468.75 549.4 477.75 549.4 2 L
N
477.75 549.4 486.75 549.4 2 L
0.5 H
N
486.75 549.4 495.75 549.4 2 L
N
495.75 549.4 504.75 549.4 2 L
N
405.75 558.4 414.75 558.4 2 L
N
414.75 558.4 423.75 558.4 2 L
N
423.75 558.4 432.75 558.4 2 L
N
432.75 558.4 441.75 558.4 2 L
N
441.75 558.4 450.75 558.4 2 L
N
450.75 558.4 459.75 558.4 2 L
N
459.75 558.4 468.75 558.4 2 L
3 H
N
468.75 558.4 477.75 558.4 2 L
0.5 H
N
477.75 558.4 486.75 558.4 2 L
N
486.75 558.4 495.75 558.4 2 L
N
495.75 558.4 504.75 558.4 2 L
N
405.75 567.4 414.75 567.4 2 L
N
414.75 567.4 423.75 567.4 2 L
N
423.75 567.4 432.75 567.4 2 L
N
432.75 567.4 441.75 567.4 2 L
N
441.75 567.4 450.75 567.4 2 L
N
450.75 567.4 459.75 567.4 2 L
N
459.75 567.4 468.75 567.4 2 L
N
468.75 567.4 477.75 567.4 2 L
N
477.75 567.4 486.75 567.4 2 L
N
486.75 567.4 495.75 567.4 2 L
N
495.75 567.4 504.75 567.4 2 L
N
403.33 495.4 506.83 580.9 R
N
(Picture 3) 438.83 503.01 T
72 67.9 522 769.9 C
0 0 595.3 841.9 C
FMENDPAGE
%%EndPage: "4" 1
%%Page: "3" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 22.9 522 53.9 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
-0.48 (Second Prolog Programming Contest - December 4, 1995, Portland, Oregon, ILPS\32595) 72 47.23 P
-0.48 ( 3 of 4) 497.61 47.23 P
72 67.9 522 769.9 R
7 X
V
1 12 Q
0 X
(5. ppp) 72 761.9 T
0 F
0.5 (Given a Prolog program \050PP\051 and a fixed query "run\050X\051", you can execute it under the usual) 72 735.9 P
1.97 (Prolog strategy, but also under the "inverse Prolog strategy". The inverse Prolog strategy) 72 721.9 P
1.86 (selects clauses in inverse lexical order and literals in a clause from right to left. We will) 72 707.9 P
0.41 (consider only PPs which contain no cut, negation, if-then-else nor disjunction in the body. A) 72 693.9 P
0.96 (PP is a Palindrome \050with respect to the fixed query run\050X\051\051 if PP delivers exactly the same) 72 679.9 P
0.92 (solutions \050order, multiplicity\051 when executed under the Prolog strategy as under the inverse) 72 665.9 P
0.12 (Prolog strategy. You are to write a predicate ppp/0 which for a given PP decides whether it is) 72 651.9 P
0.04 (Palindrome \050a PPP\051. The PP is given as a set of facts of the form pp/2 whose first argument is) 72 637.9 P
1.18 (the head of a clause and whose second argument is the body of a clause - in the form that) 72 623.9 P
-0.37 (Prologs clause/2 would have given if the PP was in the \050dynamic\051 database. As said before, the) 72 609.9 P
-0.02 (initial query is always the single atom run\050X\051. Your predicate ppp/0  succeeds iff the facts pp/) 72 595.9 P
(2 represent a PPP with respect to this query.) 72 581.9 T
(Example 1:) 72 553.9 T
(pp\050run\0501\051,true\051 .  pp\050run\0502\051,true\051 .) 144 553.9 T
(?- ppp .) 72 525.9 T
(No) 72 511.9 T
(Example 2:) 72 483.9 T
(pp\050run\0501\051,true\051 .  pp\050run\0502\051,true\051 .  pp\050run\0501\051,true\051 .) 144 483.9 T
(?- ppp .) 72 455.9 T
(Yes) 72 441.9 T
-0.02 (Your ppp/0 will be tested on PPs which contain no calls to built-in predicates, except for true/) 72 413.9 P
-0.17 (0 and write/1: since your ppp/0 will most probably contain some sort of a meta-interpreter, we) 72 399.9 P
(want you to "execute" calls to write/1 properly as Prolog would.) 72 385.9 T
1.9 (You saw of course that the property PPP is not decidable. PP can loop \050usual or inverse) 72 357.9 P
0.96 (strategy\051 ... Still, the  program  in example 3 loops \050for both strategies\051 but it is possible to) 72 343.9 P
(decide that it is not PPP: you don\325t have to explore the whole search tree to see this.) 72 329.9 T
(Example 3:) 72 301.9 T
(pp\050run\0501\051,true\051 .  pp\050run\0502\051,run\0502\051\051 .  pp\050run\0503\051,true\051 .) 144 301.9 T
(?- ppp.) 72 273.9 T
(No) 72 259.9 T
0.09 (So, we will test your submission of ppp/0 on two sets of programs: loop-free programs which) 72 231.9 P
0.13 (are either PPP or not, and programs containing a loop \050for either strategy\051 which are not PPP.) 72 217.9 P
0.28 (A correct submission for the first set will earn you 1 point, a correct submission for both sets) 72 203.9 P
0.65 (earns you 2 points; you get no points for a submission that only works on the second set, as) 72 189.9 P
("ppp :- fail." would come too quickly to mind :-\051) 72 175.9 T
(By the way, we can test looping PPs in finite time !) 72 161.9 T
FMENDPAGE
%%EndPage: "3" 2
%%Page: "2" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 22.9 522 53.9 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
-0.48 (Second Prolog Programming Contest - December 4, 1995, Portland, Oregon, ILPS\32595) 72 47.23 P
-0.48 ( 2 of 4) 497.61 47.23 P
72 67.9 522 769.9 R
7 X
V
1 12 Q
0 X
(3. powers) 72 761.9 T
0 F
1.09 (Write a predicate powers/3 which is called with as first argument a list of positive integers) 72 735.9 P
-0.12 (greater than 1, second argument a positive integer N and free third argument. Such a call must) 72 721.9 P
0.12 (succeed exactly once and unify the third argument with the list which contains the smallest N) 72 707.9 P
0.05 (integers \050in ascending order\051  which are a positive \050non-zero\051 power of one of the elements of) 72 693.9 P
(the first argument. Some examples:) 72 679.9 T
(?- powers\050[3,5,4],17,L\051 .) 72 651.9 T
(  L = [3,4,5,9,16,25,27,64,81,125,243,256,625,729,1024,2187,3125]) 72 637.9 T
(?- powers\050[2,3,4,5,6,7,8,9,10],50,L\051 .) 72 609.9 T
(L= [2,3,4,5,6,7,8,9,10,16,25,27,32,36,49,64,81,100,125,128,216,243,256,343,512,625,729,) 72 595.9 T
(1000,1024,1296,2048,2187,2401,3125,4096,6561,7776,8192,10000,15625,16384,16807,) 72 581.9 T
(19683,32768,46656,59049,65536,78125,100000,117649]) 72 567.9 T
(?- powers\050[2,9999999,9999999],20,L\051 .) 72 539.9 T
(L= [2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,) 72 525.9 T
(524288,1048576]) 72 511.9 T
(?- powers\050[4,2],6,L\051 .) 72 483.9 T
(  L = [2,4,8,16,32,64]) 72 469.9 T
1 F
(4. exit) 72 427.9 T
0 F
0.15 (Consider a maze with the following properties: every location in the maze is characterised by) 72 401.9 P
0.52 (two coordinates \050X,Y\051 both of which are integers. It has an entry \050by convention on position) 72 387.9 P
0.41 (\0501,1\051\051 and one exit - you guessed it already: you will have to find the coordinates of the exit.) 72 373.9 P
0.27 (The maze has an internal state called current_position, which is set initially to the position of) 72 359.9 P
0.6 (the entry and which represents where you are in the maze. You have no direct access to this) 72 345.9 P
-0.51 (internal state ! You can interrogate the maze by means of two predicates: move/2 and ex/0. The) 72 331.9 P
0.09 (goal "ex" succeeds iff current_position is the one of the exit. The action of the goal move/2 is) 72 317.9 P
0.47 (a bit more complicated: you call it with ground arguments, representing a position, like in ?-) 72 303.9 P
-0.68 (go\0503,4\051 . If the maze is such that you can go in one step from the current_position to the position) 72 289.9 P
0.07 (\0503,4\051, the call succeeds and updates the internal state current_position to \0503,4\051. If you can\325t go) 72 275.9 P
0.17 (in one step from current_position to \0503,4\051 the goal fails and the internal state current_position) 72 261.9 P
-0.63 (is reset to the entry position: i.e. you are thrown back to the entry when you make an impossible) 72 247.9 P
3.35 (step so to speak. The same happens if you call move/2 with free or otherwise "bad") 72 233.9 P
0.31 (argument\050s\051. To limit the posibilities: a direct step is only possible to an adjacent position \050X) 72 219.9 P
(or Y coordinates differ by one\051.) 72 205.9 T
0.56 (You write a predicate exit/2 which is to be called with free arguments and whose arguments) 72 191.9 P
1.02 (are upon success the coordinates of the exit of the maze. The size of the maze is not given) 72 177.9 P
(\050move/2 fails if given a non-existing position\051.) 72 163.9 T
-0.24 (There are three quirks in this problem: you can't really test it  yourself, unless you simulate the) 72 149.9 P
0.98 (current position and the possible moves in the maze. Make sure you remove the simulation) 72 135.9 P
0.28 (code from your submitted program. Also, you have no idea how large the maze is, neither its) 72 121.9 P
-0.5 (global shape. Finally, if a move fails, you can't just backtrack over the attempt, because you are) 72 107.9 P
(thrown back to the entry of the maze !) 72 93.9 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "1" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 22.9 522 53.9 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
-0.48 (Second Prolog Programming Contest - December 4, 1995, Portland, Oregon, ILPS\32595) 72 47.23 P
-0.48 ( 1 of 4) 497.61 47.23 P
72 67.9 522 769.9 R
7 X
V
0 12 Q
0 X
0.31 (If the description of the problem relies on given predicates, no definitions of these predicates) 72 761.9 P
1.53 (should be part of the program you submit as a solution. Our test suite will \050only\051 call the) 72 747.9 P
1.53 (predicates which are mentioned in the title of the sections and with free arguments unless) 72 733.9 P
(otherwise stated.) 72 719.9 T
-0.16 (The state of the Prolog \050 and recorded\051 database before and after a program  run, should be the) 72 705.9 P
0.34 (same, i.e. if your method of solution involves asserting some clauses, they should be cleaned) 72 691.9 P
-0.51 (up by your program  and without us having to invoke a special predicate. The cleanup time will) 72 677.9 P
-0.38 (be counted in the solution time. Efficiency of your submission is not important for the ranking,) 72 663.9 P
(but, there is a timeout on the testing, which can make a \325correct\325 solution unacceptable.) 72 649.9 T
(Do not use predicates with a name starting with ilps95 or test.) 72 635.9 T
0.28 (The name of a problem is the name of the predicate you must supply, and preferably also the) 72 621.9 P
(name of the file you submit.) 72 607.9 T
1 F
0.29 (We are grateful to Vivek Khera and his team for making the problem statements of the) 72 579.9 P
1.67 (Internet Programming Contest publicly available: two of the problems were adapted) 72 565.9 P
(from these. The other problems were adapted  from folklore and uncertain sources ...) 72 551.9 T
(1. triangle) 72 523.9 T
0 F
(A triangle of size 5 looks on the screen like:) 72 497.9 T
0.54 (Note that there is a space between every two stars on a horizontal line. Between the top of a) 72 394.9 P
(triangle of size N and the left side ofthe screen, there shouldn't be more than \050N+2\051 spaces.) 72 380.9 T
0.9 (Write a predicate triangle/1 which is called with its argument instantiated to a non-negative) 72 366.9 P
(integer and which draws a triangle of this size on the screen.) 72 352.9 T
1 F
(2. cycle) 72 310.9 T
0 F
0.78 (Write a predicate cycle/3 which is to be called with positive \050non-zero\051 integers as first two) 72 284.9 P
2.27 (arguments and free third argument. Such a call must succeed exactly once with as third) 72 270.9 P
1.34 (argument a list of integers \050from 0 to 9\051 which represents the decimal cycle you get when) 72 256.9 P
(dividing the first argument by the second. Some examples:) 72 242.9 T
(?- cycle\0503,4,C\051 .) 72 214.9 T
(C = [0]) 72 200.9 T
(% since 3/4 = 0.250000...) 144 200.9 T
(?- cycle\0504,3,C\051 .) 72 186.9 T
(C = [3]) 72 172.9 T
(% since 4/3 = 1.333...) 144 172.9 T
(?- cycle\0501,7,C\051 .) 72 158.9 T
(C = [1,4,2,8,5,7]) 72 144.9 T
(% since 1/7 = 0.142857142857...) 157.76 144.9 T
(In the last example, also C = [2,8,5,7,1,4] is a correct answer - and any rotation of it.) 72 116.9 T
72 67.9 522 769.9 C
72 404.9 522 479.9 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(*) 98.19 462.72 T
(* *) 93.69 450.72 T
(* * *) 89.19 438.72 T
(* * * *) 84.69 426.72 T
(* * * * *) 80.19 414.72 T
72 67.9 522 769.9 C
0 0 595.3 841.9 C
FMENDPAGE
%%EndPage: "1" 4
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Descend
%%Pages: 4
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%EOF
